
data types of sql

char 
varchar
Blob
int
tintint
bigint
bit
float
double
boolean
date
time
year


note:- CHAR is for the fixed length & varchar id for length string 
        varchar is the better as it only occupies necessary memory & work more efficiently
		
		
DQL:- data Query language  :- use to retrieve data from databasses

DDL :- Data definition language :- used to create ,alter, rename database object  

DML :- data manipulation language :- used to modify the database like insert , update, delete

DCL :- Data control language :- used to grant & revoke permissions ( Grant, Revoke )

TCL :- Transaction Control language :- used to manage transaction ( commit , Rollback , save point )


-----------------------------------------------------------------------

DQL:- data Query language:


Select :- 

	 the select statement is used to select data from database.
	 syntax : Select c1,c2 from table_name;



where :- use for the filter the record

	select c1, c2, from table_name where condition ;
	
	operator used it 
	
	= : equal
	>: greater then
	<: less then 
	>= : greater then equal
	<= : less then equal
	<>/!= : not equal 
	
	
	AND ,OR and NOT :- 
	
	
		-> The where clause can be combined with AND ,OR and NOT operator
		-> the AND and OR Operators are used to filter records based on more then one condition
		-> AND operator display both condition true
		-> OR operator display any one condition get true
		-> NOT operator display record if condition is not true
		
		
		AND 
		
		syntax :- select * from table_name where condition1 AND condition 2;
		
		
		OR
		
		syntax:-
		
		select * from table_name where condition1 OR condition2;
		
		
		NOT 
		
		syntax:-
		
		select * from table_name where NOT condition;
		
		
	imp
	
		DISTINCT :-  removes duplicate rows from query results .
		
		syntax :- 
		
		select DISTINCT c1,c2 from table_name;
		
		
		
		

	
		like:-
		
		The Like operator is used in where clause to search for a specified pattern in a column.
		
		-> percent sign(%) :- zero , one , multiple characters
		-> underscore sign (_) :- one , single character
		
		
		WHERE CustomerName LIKE 'a%'
			Finds any values that start with "a"
 
        WHERE CustomerName LIKE '%a'
			
			Finds any values that end with "a"
 
		WHERE CustomerName LIKE '%or%'
			Finds any values that have "or" in any position
		
		WHERE CustomerName LIKE '_r%'
			Finds any values that have "r" in the second positios
		
		WHERE CustomerName LIKE 'a_%'
			Finds any values that start with "a" and are at least 2 characters in length
 
		WHERE CustomerName LIKE 'a__%'
			Finds any values that start with "a" and are at least 3 characters in length
		
		WHERE ContactName LIKE 'a%o'
			Finds any values that start with "a" and ends with "o"
	
	
	IN:- 
	
	
	filter results based on a list of values in the where clause
		
		select * from emp where emp_id IN(1,3,8);
		
		
		
	BETWEEN :-
	
	 filter results whithin a specified range in the where clause 
	 
	 syntax
	 
	  SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND
 '2023-06-30';
 
 
 
	IS NULL :- 
	
	check for null values in the where clause
	
	select * from emp where emp_addrass is null;
	
	
	AS:-
	
	Renames columns or expressions in query results.
 Example: SELECT first_name AS "First Name", last_name AS "Last Name" FROM
 employees;
 
 
 Order By:- 
 
 the order by clause allows you to sort the results set of query based on one or more columns.
 
 syntax:-
 
 The OrderBy clause is used after the select statement to sort query results
 
 select c1 ,c2 from table_name order by c1 ASC ; defaults Asending order
  for the desending order use the DESC 
  
  
  group by :-
  
  the group By clause in sql used to group rows from table bases on one or more column
  
   SELECT column1, aggregate_function(column2) FROM table_name
 GROUP BY column1;
 
 SELECT department, AVG(salary) FROM employees GROUP BY
 department;
 
 
 
	 Common Aggregate Functions:-
	 
			COUNT():
					Counts the number of rows in a group or result set.
			
			SUM():
						
					Calculates the sum of numeric values in a group or result set.
 
			AVG():- 
			
				computes the average of numeric values in a group or result set
				
			MAX():
			
					Finds the maximum value in a group or result set.
		
			MIN():
	
					Retrieves the minimum value in a group or result set.
 
	
	 
	
-------------------------------------------------------------------------------------

DDL :- data definition language


Create table :-

	it use for the create the new table form the data bases
	
	syntax :- 
	
	create table emp ( emp_id int, name varchar (50),salary decimal(10,2));
	

Alter table :-

    it is the modify the structure of the existing table 
	 you can add modify, drop , the column
	 
	 alter table emp ADD column email varchar(100);
	 
	 
	 
	 
Drop table


		use to delete an existing table
		syntax:- 
		
		drop table emp;
		
		
		
		
CREATE INDEX:
 Used to create an index on one or more columns in a table.
		
create index id_emp on emp(name);


DROP INDEX:
 
 Used to remove an existing index from a table.

DROP index id_emp_name;

----------------------------------------------------------------------------------------------------

DML data manipulation language 
	 
	 
	
INSERT:--

		The INSERT statement adds new records to a table.
			Syntax: INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2,
 ...);
			Example: INSERT INTO employees (first_name, last_name, salary) VALUES ('John',
 'Doe', 50000);
 
 
 UPDATE:--
			The UPDATE statement modifies existing records in a table.
			Syntax: UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE
 condition;
			Example: UPDATE employees SET salary = 55000 WHERE first_name = 'John';
 
 
DELETE:--	
	The DELETE statement removes records from a table.
	Syntax: DELETE FROM table_name WHERE condition;
	Example: DELETE FROM employees WHERE last_name = 'Doe';
	
	
	
--------------------------------------------------------------------------------------------------------


DCL data control language 


	->	Data Control Language focuses on the management of access rights, permissions, and  security-related aspects of a database system.
	
	->   DCL commands are used to control who can access the data, modify the data, or perform  administrative tasks within a database.
	
	two main Commands 
	
	1. GRANT 
	2. REVOKE 
	
	
	
	1. GRANT :-
	
	 is used for the provide the specific permissions to users
	 and users can perform various action on table,view, procedures
	 
	 syntax:- 
	 
	 GRANT select on emp to analyst;
	 
	 
	
	
    2. REVOKE
	
	the REVOKE Command IS USED to remove the permissions from user 
	
	 REVOKE SELECT ON Employees FROM Analyst;
	 
	 
	 
	 
----------------------------------------------------------------------------------------------


TCL 

Transaction Control language 

	-> deals with the management of transaction within a database
	
	-> TCL commands are used to control the initiation, execution and termination of transaction, which are sequences of one or more sql statement
	  that are executed that are executed aas a single unit of work 
	  
	  
	  COMMIT ROLLBACK SAVEPOINT 
	  
	  
	  
	  1. COMMIT 
	  
				-> The COMMIT command is used to permanently save the changes made during a transaction
				-> Once a COMMIT is executed, the transaction is considered successful, and the changes are made permanent.
 
 
				syntax
				
				 UPDATE Employees SET Salary = Salary * 1.10 WHERE Department = 'Sales';
                    COMMIT;
 
 
 
	2. Rollback
	
	
				->  The ROLLBACK command is used to undo changes made during a transaction.
				-> It reverts all the changes applied to the database since the transaction began.
 
				-> ROLLBACK is typically used when an error occurs during the execution of a transaction, ensuring that the database remains in a consistent state.
			
	  
				BEGIN;
				UPDATE Inventory SET Quantity = Quantity- 10 WHERE ProductID = 101;

				-- An error occurs here
				
				ROLLBACK;
				
				
				
				
	 3. SAVEPOINT:

			-> The SAVEPOINT command creates a named point within a transaction, allowing you to set a point to which you can later ROLLBACK if needed.
			
			-> SAVEPOINTs are useful when you want to undo part of a transaction while preserving other
 changes. 




UPDATE Accounts SET Balance = Balance- 100 WHERE AccountID = 123;
 
 SAVEPOINT before_withdrawal;
 
 UPDATE Accounts SET Balance = Balance + 100 WHERE AccountID = 456;
 
 -- An error occurs here
 ROLLBACK TObefore_withdrawal;
 
 -- The first update is still applied
 COMMIT;

-------------------------------------------------------------------------------------------------------------------------



Joins :-

	->   in DBMS a join an opertion that combines rows from two or more tables based on a related column between them
 
	-> join are used to retrieve data from multiple tables by linking them to gether 

type 

1. inner join
2. outer join
3. cross join
4 self join


1. inner join 


		An inner join combines data from two or more tables based on specified condition
		is called join condition
		
		Returns records that have matching value in both table
		
		one table is Orders
		
		1 . Orderid
		2. employees id
		3. orderDate 
		
		second tabale is Employees
		
		 1 .Employeesid
		 2.last_name
		 3 .first_name
		 4	birthdate
		5	photo
		
		
		
		inner join query is 
		
		
		SELECT * from Orders Inner join Employees on Orders.EmployeeID = Employees.EmployeeID;
		
		

2. Outer join 

	-> outer join combine data from two or more tables based on specified condition
	-> outer join are particularly useful when you want to include data from one table even if there is no corresponding match in other table
	
	type 
	
		1. left outer join (left join);
		2. right outer join (right join);
		3. full outer join 
		
		
		
		
	1. left outer join (left join);
	
	
		-> A left outer join returns all rows from the left table and the matching rows the right table
		-> If there is no match in the right table, the result will still include the left table's row with NULL values in the right table's columns.
		
		Select * from Employees as e left join Orders as o on o.EmployeeID = e.EmployeeID;
		
		Employees table as the left side so the table data show full on the Employees table
		and similer between the 2 table data 
	


	2. right outer join (right join)
	
	
		-> A right outer join is similer to a left outer join but returns all rows from the right table and matching rows from the left table
		
		
		
		Select * from Employees as e Right join Orders as o on o.EmployeeID = e.EmployeeID;
		
		
		display the orders table all the data  and similer of Employee tabale data 
		
		
		
	3. full Outer join
	
		A full outer join returns all the rows from right and left table
		
		Select * from Employees as e full outer join Orders as o on o.EmployeeID = e.EmployeeID;




imp 

left Exclusive join
	
	
	tabale A 
	tabale B 
	
	
	left Exclusive join means the table A is not overlap with the table B data 
	this data show is called the left Exclusive
	
	
	 select * from student as s left join courses as c on s.student_id = c.student_id  where c.student_id is null;
	 
	 
	 
	 mysql> select * from student;
+------------+-------+
| student_id | name  |
+------------+-------+
|        101 | abhii |
|        102 | bob   |
|        103 | che   |
+------------+-------+
3 rows in set (0.00 sec)

mysql> select * from courses;
+------------+---------+
| student_id | courses |
+------------+---------+
|        102 | math    |
|        103 | ppp     |
|        105 | hhh     |
|        107 | kkk     |
+------------+---------+
4 rows in set (0.00 sec)

mysql> select * from student as s left join courses as c on s.student_id = c.student_id;
+------------+-------+------------+---------+
| student_id | name  | student_id | courses |
+------------+-------+------------+---------+
|        101 | abhii |       NULL | NULL    |
|        102 | bob   |        102 | math    |
|        103 | che   |        103 | ppp     |
+------------+-------+------------+---------+
3 rows in set (0.00 sec)

mysql> select * from student as s left join courses as c on s.student_id = c.student_id  where c.student_id is null;
+------------+-------+------------+---------+
| student_id | name  | student_id | courses |
+------------+-------+------------+---------+
|        101 | abhii |       NULL | NULL    |
+------------+-------+------------+---------+
1 row in set (0.00 sec)
	
		

 rigth Exclusive join
 
 
 	tabale A 
	tabale B 
	
	
	rigth Exclusive join means the table B is not overlap with the table A data 
	this data show is called the left Exclusive
 
 mysql> select * from student as s right join courses as c on s.student_id= c.student_id where s.student_id is  null;
+------------+------+------------+---------+
| student_id | name | student_id | courses |
+------------+------+------------+---------+
|       NULL | NULL |        105 | hhh     |
|       NULL | NULL |        107 | kkk     |
+------------+------+------------+---------+
2 rows in set (0.00 sec)






 
 
 Self  join :-
 
 it is a regular join but the table is joined with itself.
 
 select a.name as manager_name, b.name from emp as a
join emp as b on a.id =b.manager_id; 
 
 


-----------------------------------------------------------------------------------------------------------------------------------------


Set Operations

	-> set operations in sql are used to combine the result set of multiple select query
	
	
	
	UNION
	INTERSECT
	
	UNION ALL
	


1 	UNION

	-> The UNION operator combines the result sets of two or more SELECT queries into a single
 result set.
 
	->  It removes duplicates by default, meaning that if there are identical rows in the result sets,
 only one instance of each row will appear in the final result.
 
 
 
  SELECT CustomerName  FROM Customers
 UNION
 SELECT SupplierName FROM Suppliers;


2 .INTERSECT

	The INTERSECT operator returns the common rows that exist in the result sets of two or more SELECT queries.
	
	it only  results distinct rows that appear in all result sets
	
	
	 SELECT CustomerName FROM Customers
 INTERSECT
 SELECT SupplierName FROM Suppliers;
 
 
 3. UNION ALL:
 
	The UNION ALL operator performs the same function as the UNION operator but does not
 remove duplicates from the result set. It simply concatenates all rows from the different
 result sets.
 
 
 
 
 